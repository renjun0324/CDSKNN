library(devtools)
load_all(.)
load_all()
load_all()
load_all()
data("cellinfo")
head(cellinfo)
data(count)
dim(count)
count[1:2,1:2]
range(count)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
data("cellinfo")
data("count")
check()
check()
check()
?quantile
?kmeans
check()
check()
check_built()
check_built(".")
data(count)
dim(count)
check()
check_built(".")
check_built(".")
check("")
check(".")
check(".")
check(".")
check(".")
library(devtools)
check()
install.packages("Matrix")
check()
library(Matrix)
check()
packageVersion("Matrix")
check_built()
check_built(".")
check_built(".")
library(devtools)
check(".")
packageVersion("Matrix")
.libPaths()
check(".")
check_built(".")
check(".")
check(".")
load_all()
check(".")
class(count)
class(cellinfo)
library(Matrix)
packageVersion(Matrix)
packageVersion("Matrix")
library(devtools)
check(".")
check(".")
check(".")
check(".")
check_built(".")
build(".")
install.packages("KKLClustering")
install.packages("~/KKLClustering_0.1.0.tar.gz")
library(KKLClustering)
dim(pca_result)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
seurat <- CreateSeuratObject(count,
min.cells = 200,
min.features = 0,
meta.data = cellinfo)
require(Seurat)
seurat <- CreateSeuratObject(count,
min.cells = 200,
min.features = 0,
meta.data = cellinfo)
seurat <- NormalizeData(object = seurat,
normalization.method = "LogNormalize",
scale.factor = 10000,
verbose = FALSE)
seurat <- ScaleData(object = seurat,
features = rownames(seurat),
block.size = 10,
verbose = FALSE)
seurat <- RunPCA(seurat,
features = rownames(seurat),
npcs = 50,
verbose = FALSE)
pca_result <- seurat@reductions$pca@cell.embeddings
Seurat
seurat
seurat <- CreateSeuratObject(count,
min.cells = 0,
min.features = 0,
meta.data = cellinfo)
seurat <- NormalizeData(object = seurat,
normalization.method = "LogNormalize",
scale.factor = 10000,
verbose = FALSE)
seurat <- ScaleData(object = seurat,
features = rownames(seurat),
block.size = 10,
verbose = FALSE)
seurat <- ScaleData(object = seurat,
features = rownames(seurat),
block.size = 10,
verbose = FALSE)
seurat <- RunPCA(seurat,
features = rownames(seurat),
npcs = 50,
verbose = FALSE)
pca_result <- seurat@reductions$pca@cell.embeddings
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
require(KKLClustering)
data("cellinfo")
data("count")
require(KKLClustering)
data("cellinfo")
cellinfo[1:5,1:5]
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
head(cellinfo)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
"
data("cellinfo")
cellinfo[1:5,1:5]
data("cellinfo")
head(cellinfo)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
require(KKLClustering)
data("cellinfo")
head(cellinfo)
data("count")
count[1:5,1:5]
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
require(KKLClustering)
data("cellinfo")
head(cellinfo)
data("count")
count[1:5,1:5]
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
require(KKLClustering)
data("cellinfo")
head(cellinfo)
data("count")
count[1:5,1:5]
require(KKLClustering)
data("cellinfo")
head(cellinfo)
data("count")
count[1:5,1:5]
seurat <- CreateSeuratObject(count,
min.cells = 0,
min.features = 0,
meta.data = cellinfo)
seurat[["percent.mt"]] <- PercentageFeatureSet(object = seurat, pattern = "^MT-")
head(seurat@meta.data)
seurat[["percent.mt"]] <- PercentageFeatureSet(object = seurat, pattern = "^Mt-")
head(seurat@meta.data)
head(count)
seurat[["percent.mt"]] <- PercentageFeatureSet(object = seurat, pattern = "^Mt")
head(seurat@meta.data)
dim(count)
setwd("/home/renjun/下载")
x=read.table("GSE109999_gene_counts.txt")
DIM(X)
xim(x)
dim(x)
x[1:5,1:5]
head(cellinfo)
x[1:5,1:5]
require(Seurat)
seurat <- CreateSeuratObject(count, min.cells = 0, min.features = 0, meta.data = cellinfo)
seurat[["percent.mt"]] <- PercentageFeatureSet(object = seurat, pattern = "^Mt-")
VlnPlot(object = endo, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"))
require(Seurat)
seurat <- CreateSeuratObject(count, min.cells = 0, min.features = 0, meta.data = cellinfo)
seurat[["percent.mt"]] <- PercentageFeatureSet(object = seurat, pattern = "^Mt-")
VlnPlot(object = seurat, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"))
# seurat <- NormalizeData(object = seurat,
#                         normalization.method = "LogNormalize",
#                         scale.factor = 10000,
#                         verbose = FALSE)
# seurat <- ScaleData(object = seurat,
#                     features = rownames(seurat),
#                     block.size = 10,
#                     verbose = FALSE)
#
# seurat <- RunPCA(seurat,
#                  features = rownames(seurat),
#                  npcs = 50,
#                  verbose = FALSE)
#
# pca_result <- seurat@reductions$pca@cell.embeddings
seurat[["percent.mt"]] <- PercentageFeatureSet(object = seurat, pattern = "^Mt")
rownames(seurat)[grep("^Mt", rownames(seurat))]
require(Seurat)
seurat <- CreateSeuratObject(count, min.cells = 0, min.features = 0, meta.data = cellinfo)
VlnPlot(object = seurat, features = c("nFeature_RNA", "nCount_RNA"))
# seurat <- NormalizeData(object = seurat,
#                         normalization.method = "LogNormalize",
#                         scale.factor = 10000,
#                         verbose = FALSE)
# seurat <- ScaleData(object = seurat,
#                     features = rownames(seurat),
#                     block.size = 10,
#                     verbose = FALSE)
#
# seurat <- RunPCA(seurat,
#                  features = rownames(seurat),
#                  npcs = 50,
#                  verbose = FALSE)
#
# pca_result <- seurat@reductions$pca@cell.embeddings
require(Seurat)
seurat <- CreateSeuratObject(count, min.cells = 0, min.features = 0, meta.data = cellinfo)
VlnPlot(object = seurat, features = c("nFeature_RNA", "nCount_RNA"))
seurat <- NormalizeData(object = seurat, verbose = FALSE)
seurat <- ScaleData(object = seurat, features = rownames(seurat), verbose = FALSE)
#
# seurat <- RunPCA(seurat,
#                  features = rownames(seurat),
#                  npcs = 50,
#                  verbose = FALSE)
#
# pca_result <- seurat@reductions$pca@cell.embeddings
knitr::include_graphics("VlnPlot(object = seurat, features = c("nFeature_RNA", "nCount_RNA"))")
require(Seurat)
seurat <- CreateSeuratObject(count, min.cells = 0, min.features = 0, meta.data = cellinfo)
knitr::include_graphics("VlnPlot(object = seurat, features = c("nFeature_RNA", "nCount_RNA"))")
require(Seurat)
seurat <- CreateSeuratObject(count, min.cells = 0, min.features = 0, meta.data = cellinfo)
knitr::include_graphics(VlnPlot(object = seurat, features = c("nFeature_RNA", "nCount_RNA")))
library(knitr)
require(KKLClustering)
data("count")
knitr::kable(count[1:5,1:5])
data("cellinfo")
knitr::kable(head(cellinfo,3))
packageVersion("Seurat")
?SCTransform
s <- CreateSeuratObject(count, project = "s", min.cells = 0, min.features = 0, meta.data = cellinfo)
VlnPlot(object = s, features = c("nFeature_RNA", "nCount_RNA"))
FeatureScatter(s, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
s <- SCTransform(s, variable.features.n = 2000, verbose = FALSE)
s <- SCTransform(s, variable.features.n = 2000, verbose = FALSE)
top10 <- head(x = VariableFeatures(s), 10)
top10
plot1 <- VariableFeaturePlot(s)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
CombinePlots(plots = list(plot1, plot2))
CombinePlots(list(plot1,plot2))
?SCTransform
s <- CreateSeuratObject(count, project = "s", min.cells = 0, min.features = 0, meta.data = cellinfo)
s <- SCTransform(s, variable.features.n = 2000, verbose = FALSE)
s
top10 <- head(x = VariableFeatures(s), 10)
plot1 <- VariableFeaturePlot(s)
LabelPoints(plot = plot1, points = top10, repel = TRUE)
require(Seurat)
s <- CreateSeuratObject(count, project = "s", min.cells = 0, min.features = 0, meta.data = cellinfo)
VlnPlot(object = s, features = c("nFeature_RNA", "nCount_RNA"))
FeatureScatter(s, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
s <- SCTransform(s, variable.features.n = 2000, verbose = FALSE)
top10 <- head(x = VariableFeatures(s), 10)
plot1 <- VariableFeaturePlot(s)
LabelPoints(plot = plot1, points = top10, repel = TRUE)
# s <- RunPCA(s, features = VariableFeatures(object = s),verbose = FALSE)
# pca_result <- seurat@reductions$pca@cell.embeddings
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
require(KKLClustering)
data("count")
knitr::kable(count[1:5,1:5])
data("cellinfo")
knitr::kable(head(cellinfo,3))
#' This function comes from URD, please check [github] (https://github.com/farrellja/URD) for more function details
#'
#' @param M (Numeric) Number of rows in input data, pc.gene
#' @param N (Numeric) Number of columns in input data, cell number
#' @param pca.sdev (Numeric vector) Standard deviations for each principal component
#' @param factor (Numeric) Factor to multiply eigenvalue null upper bound before determining significance.
#' @param do.print (Logical) Whether to report the results
#' @return Logical vector of whether each PC is significant.
#'
#' @export
pcaMarchenkoPastur <- function(M, N, pca.sdev, factor = 2, do.print=T) {
pca.eigenvalue <- (pca.sdev)^2
marchenko.pastur.max <- (1+sqrt(M/N))^2
pca.sig <- pca.eigenvalue > (marchenko.pastur.max * factor)
if (do.print) {
print(paste("Marchenko-Pastur eigenvalue null upper bound:", marchenko.pastur.max))
if (factor != 1) {
print(paste(length(which(pca.sig)), "PCs have eigenvalues larger than", factor, "times null upper bound."))
} else {
print(paste(length(which(pca.eigenvalue > marchenko.pastur.max)), "PCs have larger eigenvalues."))
}
}
return(pca.sig)
}
s <- RunPCA(s, features = VariableFeatures(object = s), npcs = 30, verbose = FALSE)
pca.c <- pcaMarchenkoPastur(M = length(VariableFeatures(s)),
N = ncol(s),
pca.sdev = s@reductions$pca@stdev,
factor = 1)
pca.c
s <- RunUMAP(s, reduction = "pca", dims = pca.c)
s <- RunTSNE(s, reduction = "pca", dims = pca.c )
s <- RunTSNE(s, reduction = "pca", dims = pca.c )
s <- RunTSNE(s, reduction = "pca", dims = which(pca.c ))
s <- RunUMAP(s, reduction = "pca", dims = which(pca.c) )
?RunUMAP
s <- RunTSNE(s, reduction = "pca", dims = which(pca.c), verbose = FALSE)
check(".")
library(devtools)
load_all()
load()
load("~/pca_result.rda")
outlier_kmeans = OutlierKmeans(dataMatrix = pca_result,
outlier_q = 0.1,
down_n = 300,
cores = 1,
seed = 723)
load_all()
outlier_kmeans = OutlierKmeans(dataMatrix = pca_result,
outlier_q = 0.1,
down_n = 300,
cores = 1,
seed = 723)
load_all()
outlier_kmeans = OutlierKmeans(dataMatrix = pca_result,
outlier_q = 0.1,
down_n = 300,
cores = 1,
seed = 723)
outlier_kmeans = OutlierKmeans(dataMatrix = pca_result,
outlier_q = 0.1,
down_n = 50,
cores = 1,
seed = 723)
sampling_result = SamplingLouvain(dataMatrix = pca_result,
outlier_kmeans = outlier_kmeans,
knn_range = 5:10,
iter = 3,
int_index = c("Davies_Bouldin","Calinski_Harabasz"),
cores = 2,
seed = 723)
load_all()
sampling_result = SamplingLouvain(dataMatrix = pca_result,
outlier_kmeans = outlier_kmeans,
knn_range = 5:10,
iter = 3,
int_index = c("Davies_Bouldin","Calinski_Harabasz"),
cores = 2,
seed = 723)
sampling_result = SamplingLouvain(dataMatrix = pca_result,
outlier_kmeans = outlier_kmeans,
knn_range = 5:10,
iter = 3,
int_index = c("Davies_Bouldin","Calinski_Harabasz"),
cores = 2,
seed = 723)
load_all()
load_all()
sampling_result = SamplingLouvain(dataMatrix = pca_result,
outlier_kmeans = outlier_kmeans,
knn_range = 5:10,
iter = 3,
int_index = c("Davies_Bouldin","Calinski_Harabasz"),
cores = 2,
seed = 723)
load_all()
sampling_result = SamplingLouvain(dataMatrix = pca_result,
outlier_kmeans = outlier_kmeans,
knn_range = 5:10,
iter = 3,
int_index = c("Davies_Bouldin","Calinski_Harabasz"),
cores = 2,
seed = 723)
new_louvain = NewLouvain(sampling_result = sampling_result,
outlier_kmeans = outlier_kmeans,
index = "Davies_Bouldin",
cores = 1)
load_all()
new_louvain = NewLouvain(sampling_result = sampling_result,
outlier_kmeans = outlier_kmeans,
index = "Davies_Bouldin",
cores = 1)
new_louvain
build_manual()
build_manual(".")
check("")
check(".")
check_built(:.)
check_built(".")
document()
build_manual()
library(devtools)
load_all()
document()
build_manual()
document()
build_manual()
document()
build_manual()
document()
build_manual()
document()
build_manual()
document()
build_manual()
document()
build_manual()
document()
build_manual()
check("/")
check(".")
build()
